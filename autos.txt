-- Automata: 0 -a-> 1 -a-> 2 -a-> 3*
-- Automata de estado cero a uno leyendo la a hasta que llegue al estado de acceptacion 3*Automaton {state = fromList ['a'_1, 'b'_2, 'b'_3, a'_4, 'c'_5, 'a'_6, 'c'_7], sigma = fromList \"abc\", delta = fromList [('a'_1,fromList ['a'_1,'b'_2,'a'_4]),('b'_2,fromList ['b'_3]),('b'_3,fromList ['a'_1,'b'_2,'a'_4]),('a'_4,fromList ['c'_5]),('c'_5,fromList ['a'_6]),('a'_6,fromList ['c'_7]),('c'_7,fromList ['a'_6])], initial = 'a'_1, accepting = fromList ['c'_5,'c'_7]}") :: Automaton Int Char

auto1 = (read "Automaton {state = fromList [0,1,2,3], sigma = fromList \"a\", delta = fromList [(0,fromList [('a',1)]),(1,fromList [('a',2)]),(2,fromList [('a',3)])], initial = 0, accepting = fromList [3]}") :: Automaton Int Char

-- Automata: que lee la siguiente expresion regular aa*
auto2 = (read "Automaton {state = fromList [0,1], sigma = fromList \"a\", delta = fromList [(0,fromList [('a',1)]),(1,fromList [('a',1)])], initial = 0, accepting = fromList [1]}") :: Automaton Int Char

auto3 = (read "Automaton {state = fromList [0,1,2], sigma = fromList \"ab\", delta = fromList [(0,fromList [('a',1)]),(1,fromList [('a',2),('b',1)])], initial = 0, accepting = fromList [2]}") :: Automaton Int Char
auto33 = (read "Automaton {state = fromList [0,1,2], sigma = fromList ['a'_1,'b'_2,'c'_3], delta = fromList [(0,fromList [('a',1)]),(1,fromList [('a',2),('b',1)])], initial = 0, accepting = fromList [2]}") :: Automaton Int Char
--auto4 = (read "Automaton {state = fromList ['a'_1, 'b'_2, 'b'_3, a'_4, 'c'_5, 'a'_6, 'c'_7], sigma = fromList \"ab\", delta = fromList [('a'_1,fromList ['a'_1,'b'_2,'a'_4]),('b'_2,fromList ['b'_3]),('b'_3,fromList ['a'_1,'b'_2,'a'_4]),('a'_4,fromList ['c'_5]),('c'_5,fromList ['a'_6]),('a'_6,fromList ['c'_7]),('c'_7,fromList ['a'_6])], initial = 'a'_1, accepting = fromList ['c'_5,'c'_7]}") :: Automaton Int Char
auto5 = (read "Automaton {state = fromList [0,1,2,3,4,5,6], sigma = fromList \"abc\", delta = fromList [(0,fromList [('a',1),('b',2),('a',4)]),(1,fromList [('b',3)]),(2,fromList [('a',1),('b',2),('a',4)]),(3,fromList [('c',5)]),(4,fromList [('a',6)]),(5,fromList [('c',7)]),(6,fromList [('a',6)])], initial = 0, accepting = fromList [4,6]}") :: Automaton Int Char
auto4 = (read "Automaton {state = fromList [1, 2, 3, 4, 5, 6, 7], sigma = fromList \"abc\", delta = fromList [(1,fromList [('a',1),('b',2),('a',4)]),(2,fromList [('b',3)]),(3,fromList [('a',1),('b',2),('a',4)]),(4,fromList [('c',5)]),(5,fromList [('a',6)]),(6,fromList [('c',7)]),(7,fromList [('a',6)])], initial = 1, accepting = fromList [5,7]}") :: Automaton Int Char
--auto4 = (read "Automaton {state = fromList ['a'_1, 'b'_2, 'b'_3, a'_4, 'c'_5, 'a'_6, 'c'_7], sigma = fromList \"abc\", delta = fromList [('a'_1,fromList ['a'_1,'b'_2,'a'_4]),('b'_2,fromList ['b'_3]),('b'_3,fromList ['a'_1,'b'_2,'a'_4]),('a'_4,fromList ['c'_5]),('c'_5,fromList ['a'_6]),('a'_6,fromList ['c'_7]),('c'_7,fromList ['a'_6])], initial = 'a'_1, accepting = fromList ['c'_5,'c'_7]}") :: Automaton Int Char
